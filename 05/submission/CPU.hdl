// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A/C instruction switch
    // A instruction: instruction[15] = 0
    // D instruction: instruction[15] = 1
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);

    // Load A register if A instruction or d1=1
    Not(in=instruction[15], out=notop);
    Or(a=notop, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA);

    // A/M switch
    // Select M if a=1
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);

    // Load D register if d2=1 and C instruction
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    // writeM=1 if d3=1 and A instruction
    And(a=instruction[3], b=instruction[15], out=writeM);

    // addressM=outA
    And16(a=outA, b=true, out[0..14]=addressM);

    // Control bits for the ALU are c1 to c6
    ALU(x=outD,
        y=outAM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU,
        zr=zr,
        ng=ng);

    // outM
    And16(a=outALU, b=true, out=outM);

    // Program Counter

    // Load PC if:
    // if j1=1 and ng=1, load=1
    // else if j2=1 and zr=1, load=1
    // else if j3=1 and zr=0 and ng=0, load=1
    // else load=0
    // and C instruction
    And(a=instruction[2], b=ng, out=and1);
    And(a=instruction[1], b=zr, out=and2);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=andx);
    And(a=instruction[0], b=andx, out=and3);
    Or(a=and1, b=and2, out=and4);
    Or(a=and3, b=and4, out=jmp);
    And(a=jmp, b=instruction[15], out=loadPC);

    // No jump or A instruction, increment
    Not(in=loadPC, out=notloadPC);
    Or(a=notloadPC, b=notop, out=incPC);

    PC(in=outA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}